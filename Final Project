#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Song struct
typedef struct Song {
    char title[100];
    char singer[100];
    struct Song *next;
} Song;

// Playlist struct
typedef struct Playlist {
    char name[100];
    Song *songs;
    struct Playlist *next;
} Playlist;

// Function prototypes
void trim_input(char *str);
Song* create_song(const char *title, const char *singer);
void add_song(Song **head, const char *title, const char *singer);
void display_songs(Song *head);
void display_all_playlists(Playlist *head);
void remove_song(Song **head, const char *title);
Playlist* create_playlist(const char *name);
void add_playlist(Playlist **head, const char *name);
Playlist* find_playlist(Playlist *head, const char *name);
void free_all_playlists(Playlist *head);

int main() {
    Playlist *playlists = NULL;
    int choice;
    char name[100], title[100], singer[100];

    do {
        printf("\n--- Playlist Management ---\n");
        printf("1. Create New Playlist\n");
        printf("2. Add Song to Playlist\n");
        printf("3. Display All Playlists and Songs\n");
        printf("4. Remove Song from Playlist\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume leftover newline

        switch (choice) {
            case 1:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    add_playlist(&playlists, name);
                }
                break;
            case 2:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    Playlist *playlist = find_playlist(playlists, name);
                    if (playlist) {
                        printf("Enter song title: ");
                        if (fgets(title, sizeof(title), stdin)) {
                            trim_input(title);
                            printf("Enter singer: ");
                            if (fgets(singer, sizeof(singer), stdin)) {
                                trim_input(singer);
                                add_song(&playlist->songs, title, singer);
                            }
                        }
                    } else {
                        printf("Playlist not found.\n");
                    }
                }
                break;
            case 3:
                display_all_playlists(playlists);
                break;
            case 4:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    Playlist *playlist = find_playlist(playlists, name);
                    if (playlist) {
                        printf("Enter song title to remove: ");
                        if (fgets(title, sizeof(title), stdin)) {
                            trim_input(title);
                            remove_song(&playlist->songs, title);
                        }
                    } else {
                        printf("Playlist not found.\n");
                    }
                }
                break;
            case 5:
                free_all_playlists(playlists);
                printf("Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}

// Helper function to trim input
void trim_input(char *str) {
    int len = strlen(str);

    // Trim leading whitespace
    int start = 0;
    while (start < len && isspace((unsigned char)str[start])) {
        start++;
    }

    // Trim trailing whitespace
    int end = len - 1;
    while (end >= start && isspace((unsigned char)str[end])) {
        end--;
    }

    // Shift string left if needed and null-terminate
    if (start > 0 || end < len - 1) {
        memmove(str, str + start, end - start + 1);
    }
    str[end - start + 1] = '\0';
}

// Create a new song
Song* create_song(const char *title, const char *singer) {
    Song *new_song = (Song *)malloc(sizeof(Song));
    if (!new_song) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    strcpy(new_song->title, title);
    strcpy(new_song->singer, singer);
    new_song->next = NULL;
    return new_song;
}

// Add a song to the playlist
void add_song(Song **head, const char *title, const char *singer) {
    Song *new_song = create_song(title, singer);
    if (!new_song) return;

    new_song->next = *head;
    *head = new_song;
    printf("Song added: %s by %s\n", title, singer);
}

void sort_songs(Song **song_array, int count) {
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (strcmp(song_array[j]->title, song_array[j + 1]->title) > 0) {
                Song *temp = song_array[j];
                song_array[j] = song_array[j + 1];
                song_array[j + 1] = temp;
            }
        }
    }
}

void display_songs(Song *head) {
    if (!head) {
        printf("  No songs in this playlist.\n");
        return;
    }

    // Hitung jumlah lagu
    int count = 0;
    Song *temp = head;
    while (temp) {
        count++;
        temp = temp->next;
    }

    // Salin lagu ke array sementara
    Song **song_array = (Song **)malloc(count * sizeof(Song *));
    if (!song_array) {
        printf("Memory allocation failed!\n");
        return;
    }

    temp = head;
    for (int i = 0; i < count; i++) {
        song_array[i] = temp;
        temp = temp->next;
    }

    // Urutkan array
    sort_songs(song_array, count);

    // Tampilkan lagu yang sudah diurutkan
    for (int i = 0; i < count; i++) {
        printf("  %d. %s by %s\n", i + 1, song_array[i]->title, song_array[i]->singer);
    }

    free(song_array);
}

void write_playlist_to_file(Playlist *playlist) {
    if (!playlist) return;

    // Buat nama file berdasarkan nama playlist
    char filename[120];
    snprintf(filename, sizeof(filename), "%s.txt", playlist->name);

    // Buka file untuk menulis
    FILE *file = fopen(filename, "w");
    if (!file) {
        printf("Error: Could not create file %s\n", filename);
        return;
    }

    fprintf(file, "Playlist: %s\n", playlist->name);

    if (!playlist->songs) {
        fprintf(file, "  No songs in this playlist.\n");
    } else {
        // Hitung jumlah lagu dan salin ke array
        int count = 0;
        Song *temp = playlist->songs;
        while (temp) {
            count++;
            temp = temp->next;
        }

        Song **song_array = (Song **)malloc(count * sizeof(Song *));
        if (!song_array) {
            fprintf(file, "Memory allocation failed.\n");
            fclose(file);
            return;
        }

        temp = playlist->songs;
        for (int i = 0; i < count; i++) {
            song_array[i] = temp;
            temp = temp->next;
        }

        // Urutkan lagu
        sort_songs(song_array, count);

        // Tulis lagu yang sudah diurutkan ke file
        for (int i = 0; i < count; i++) {
            fprintf(file, "  %d. %s by %s\n", i + 1, song_array[i]->title, song_array[i]->singer);
        }

        free(song_array);
    }

    fclose(file);
    printf("Playlist %s has been saved to %s\n", playlist->name, filename);
}

void display_all_playlists(Playlist *head) {
    if (!head) {
        printf("No playlists available.\n");
        return;
    }

    while (head) {
        printf("Playlist: %s\n", head->name);
        display_songs(head->songs);
        
        // Tulis isi playlist ke file
        write_playlist_to_file(head);

        head = head->next;
    }
}

// Remove a song by title
void remove_song(Song **head, const char *title) {
    if (!*head) {
        printf("Playlist is empty.\n");
        return;
    }
    if (strcmp((*head)->title, title) == 0) {
        Song *temp = *head;
        *head = (*head)->next;
        free(temp);
        printf("Removed song: %s\n", title);
        return;
    }
    Song *current = *head;
    while (current->next && strcmp(current->next->title, title) != 0) {
        current = current->next;
    }
    if (current->next) {
        Song *temp = current->next;
        current->next = current->next->next;
        free(temp);
        printf("Removed song: %s\n", title);
    } else {
        printf("Song not found: %s\n", title);
    }
}

// Create a new playlist
Playlist* create_playlist(const char *name) {
    Playlist *new_playlist = (Playlist *)malloc(sizeof(Playlist));
    if (!new_playlist) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    strcpy(new_playlist->name, name);
    new_playlist->songs = NULL;
    new_playlist->next = NULL;
    return new_playlist;
}

// Add a playlist to the list
void add_playlist(Playlist **head, const char *name) {
    Playlist *new_playlist = create_playlist(name);
    if (!new_playlist) return;

    new_playlist->next = *head;
    *head = new_playlist;
    printf("Playlist created: %s\n", name);
}

// Find a playlist by name
Playlist* find_playlist(Playlist *head, const char *name) {
    while (head) {
        if (strcmp(head->name, name) == 0) {
            return head;
        }
        head = head->next;
    }
    return NULL;
}

// Free all playlists and their songs
void free_all_playlists(Playlist *head) {
    while (head) {
        Playlist *temp = head;
        head = head->next;

        Song *song = temp->songs;
        while (song) {
            Song *song_temp = song;
            song = song->next;
            free(song_temp);
        }
        free(temp);
    }
}
