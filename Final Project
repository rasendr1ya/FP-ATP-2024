#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Struktur data untuk lagu
typedef struct Song {
    char title[100];
    char singer[100];
    struct Song *next;
} Song;

// Struktur data untuk playlist
typedef struct Playlist {
    char name[100];
    Song *songs;
    struct Playlist *next;
} Playlist;

// Prototipe fungsi
void trim_input(char *str);
Song* create_song(const char *title, const char *singer);
void add_song(Song **head, const char *title, const char *singer);
void display_songs(Song *head, int sort_type);
void display_all_playlists(Playlist *head, int sort_type);
void remove_song(Song **head, const char *title);
Playlist* create_playlist(const char *name);
void add_playlist(Playlist **head, const char *name);
Playlist* find_playlist(Playlist *head, const char *name);
void free_all_playlists(Playlist *head);
void sort_songs(Song **song_array, int count, int sort_type);
void read_from_file(Playlist **head, const char *filename);
void export_playlists_to_files(Playlist *head);

// Fungsi utama
int main() {
    Playlist *playlists = NULL;
    int choice;
    char name[100], title[100], singer[100], filename[100];
    int sort_type = 0; // 0 = urutkan berdasarkan judul, 1 = urutkan berdasarkan penyanyi

    do {
        printf("\n--- Playlist Management ---\n");
        printf("1. Create New Playlist\n");
        printf("2. Add Song to Playlist\n");
        printf("3. Display All Playlists and Songs\n");
        printf("4. Remove Song from Playlist\n");
        printf("5. Toggle Sort Type\n");
        printf("6. Read Playlists from File\n");
        printf("7. Export Playlists to Separate Files\n");
        printf("8. Exit\n");
        printf("Current Sort: %s\n", sort_type ? "Artist" : "Title");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume newline

        switch (choice) {
            case 1:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    add_playlist(&playlists, name);
                }
                break;
            case 2:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    Playlist *playlist = find_playlist(playlists, name);
                    if (playlist) {
                        printf("Enter song title: ");
                        if (fgets(title, sizeof(title), stdin)) {
                            trim_input(title);
                            printf("Enter singer: ");
                            if (fgets(singer, sizeof(singer), stdin)) {
                                trim_input(singer);
                                add_song(&playlist->songs, title, singer);
                            }
                        }
                    } else {
                        printf("Playlist not found.\n");
                    }
                }
                break;
            case 3:
                display_all_playlists(playlists, sort_type);
                break;
            case 4:
                printf("Enter playlist name: ");
                if (fgets(name, sizeof(name), stdin)) {
                    trim_input(name);
                    Playlist *playlist = find_playlist(playlists, name);
                    if (playlist) {
                        printf("Enter song title to remove: ");
                        if (fgets(title, sizeof(title), stdin)) {
                            trim_input(title);
                            remove_song(&playlist->songs, title);
                        }
                    } else {
                        printf("Playlist not found.\n");
                    }
                }
                break;
            case 5:
                sort_type = !sort_type;
                printf("Sorting changed to: %s\n", sort_type ? "Artist" : "Title");
                break;
            case 6:
                printf("Enter filename to read from: ");
                if (fgets(filename, sizeof(filename), stdin)) {
                    trim_input(filename);
                    read_from_file(&playlists, filename);
                }
                break;
            case 7:
                export_playlists_to_files(playlists);
                break;
            case 8:
                free_all_playlists(playlists);
                printf("Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 8);

    return 0;
}

// Fungsi untuk menghapus spasi di awal dan akhir input
void trim_input(char *str) {
    int len = strlen(str);
    int start = 0;
    while (start < len && isspace((unsigned char)str[start])) start++;
    int end = len - 1;
    while (end >= start && isspace((unsigned char)str[end])) end--;
    memmove(str, str + start, end - start + 1);
    str[end - start + 1] = '\0';
}

// Fungsi untuk membuat lagu baru
Song* create_song(const char *title, const char *singer) {
    Song *new_song = (Song *)malloc(sizeof(Song));
    if (!new_song) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    strcpy(new_song->title, title);
    strcpy(new_song->singer, singer);
    new_song->next = NULL;
    return new_song;
}

// Fungsi untuk menambahkan lagu
void add_song(Song **head, const char *title, const char *singer) {
    Song *new_song = create_song(title, singer);
    if (!new_song) return;
    new_song->next = *head;
    *head = new_song;
    printf("Song added: %s by %s\n", title, singer);
}

// Fungsi untuk mengurutkan lagu
void sort_songs(Song **song_array, int count, int sort_type) {
    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            int compare_result = sort_type == 0
                ? strcmp(song_array[j]->title, song_array[j + 1]->title)
                : strcmp(song_array[j]->singer, song_array[j + 1]->singer);
            if (compare_result > 0) {
                Song *temp = song_array[j];
                song_array[j] = song_array[j + 1];
                song_array[j + 1] = temp;
            }
        }
    }
}

// Fungsi untuk menampilkan lagu
void display_songs(Song *head, int sort_type) {
    if (!head) {
        printf("  No songs in this playlist.\n");
        return;
    }
    int count = 0;
    Song *temp = head;
    while (temp) {
        count++;
        temp = temp->next;
    }
    Song **song_array = (Song **)malloc(count * sizeof(Song *));
    if (!song_array) {
        printf("Memory allocation failed!\n");
        return;
    }
    temp = head;
    for (int i = 0; i < count; i++) {
        song_array[i] = temp;
        temp = temp->next;
    }
    sort_songs(song_array, count, sort_type);
    for (int i = 0; i < count; i++) {
        printf("  %d. %s by %s\n", i + 1, song_array[i]->title, song_array[i]->singer);
    }
    free(song_array);
}

// Fungsi untuk menampilkan semua playlist
void display_all_playlists(Playlist *head, int sort_type) {
    if (!head) {
        printf("No playlists available.\n");
        return;
    }
    while (head) {
        printf("Playlist: %s\n", head->name);
        display_songs(head->songs, sort_type);
        head = head->next;
    }
}

// Fungsi untuk menghapus lagu
void remove_song(Song **head, const char *title) {
    Song *temp = *head, *prev = NULL;
    while (temp && strcmp(temp->title, title) != 0) {
        prev = temp;
        temp = temp->next;
    }
    if (!temp) {
        printf("Song not found.\n");
        return;
    }
    if (!prev) *head = temp->next;
    else prev->next = temp->next;
    free(temp);
    printf("Song removed: %s\n", title);
}

// Fungsi untuk membuat playlist baru
Playlist* create_playlist(const char *name) {
    Playlist *new_playlist = (Playlist *)malloc(sizeof(Playlist));
    if (!new_playlist) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    strcpy(new_playlist->name, name);
    new_playlist->songs = NULL;
    new_playlist->next = NULL;
    return new_playlist;
}

// Fungsi untuk menambahkan playlist
void add_playlist(Playlist **head, const char *name) {
    Playlist *new_playlist = create_playlist(name);
    if (!new_playlist) return;
    new_playlist->next = *head;
    *head = new_playlist;
    printf("Playlist created: %s\n", name);
}

// Fungsi untuk menemukan playlist
Playlist* find_playlist(Playlist *head, const char *name) {
    while (head && strcmp(head->name, name) != 0) {
        head = head->next;
    }
    return head;
}

// Fungsi untuk membebaskan semua playlist
void free_all_playlists(Playlist *head) {
    while (head) {
        Playlist *temp_playlist = head;
        Song *song = head->songs;
        while (song) {
            Song *temp_song = song;
            song = song->next;
            free(temp_song);
        }
        head = head->next;
        free(temp_playlist);
    }
}

// Fungsi untuk membaca playlist dari file
void read_from_file(Playlist **head, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        printf("Could not open file %s\n", filename);
        return;
    }

    char line[300];
    while (fgets(line, sizeof(line), file)) {
        trim_input(line);
        char *playlist_name = strtok(line, ",");
        char *title = strtok(NULL, ",");
        char *singer = strtok(NULL, ",");

        if (playlist_name && title && singer) {
            Playlist *playlist = find_playlist(*head, playlist_name);
            if (!playlist) {
                add_playlist(head, playlist_name);
                playlist = *head;
            }
            add_song(&playlist->songs, title, singer);
        }
    }

    fclose(file);
    printf("Playlists loaded from %s\n", filename);
}

// Fungsi untuk mengekspor tiap playlist ke file terpisah
void export_playlists_to_files(Playlist *head) {
    while (head) {
        char filename[150];
        snprintf(filename, sizeof(filename), "%s.txt", head->name);
        FILE *file = fopen(filename, "w");
        if (!file) {
            printf("Could not open file %s\n", filename);
            head = head->next;
            continue;
        }

        Song *song = head->songs;
        while (song) {
            fprintf(file, "%s,%s\n", song->title, song->singer);
            song = song->next;
        }

        fclose(file);
        printf("Playlist '%s' exported to '%s'\n", head->name, filename);
        head = head->next;
    }
}
