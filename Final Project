#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Song struct
typedef struct Song {
    char title[100];
    char singer[100];
    struct Song *next;
} Song;

// Function prototypes
void trim_input(char *str);
int case_insensitive_compare(const char *s1, const char *s2);
Song* create_song(const char *title, const char *singer);
void add_song(Song **head, const char *title, const char *singer);
void display_playlist(Song *head);
void remove_song(Song **head, const char *title);
void sort_playlist_by_title(Song **head);
void sort_playlist_by_singer(Song **head);
void save_playlist_to_file(Song *head, const char *filename);
void free_playlist(Song *head);

// Trim input to remove leading/trailing spaces or newlines
void trim_input(char *str) {
    int len = strlen(str);

    // Trim leading whitespace
    int start = 0;
    while (start < len && isspace((unsigned char)str[start])) {
        start++;
    }

    // Trim trailing whitespace
    int end = len - 1;
    while (end >= start && isspace((unsigned char)str[end])) {
        end--;
    }

    // Shift string left if needed and null-terminate
    if (start > 0 || end < len - 1) {
        memmove(str, str + start, end - start + 1);
    }
    str[end - start + 1] = '\0';
}

// Case-insensitive comparison for sorting
int case_insensitive_compare(const char *s1, const char *s2) {
    while (*s1 && *s2) {
        int diff = tolower((unsigned char)*s1) - tolower((unsigned char)*s2);
        if (diff != 0) {
            return diff;
        }
        s1++;
        s2++;
    }
    return tolower((unsigned char)*s1) - tolower((unsigned char)*s2);
}

int main() {
    Song *playlist = NULL;
    int choice;
    char title[100], singer[100];
    char filename[100];

    do {
        printf("\n--- Playlist Management ---\n");
        printf("1. Add A Song\n");
        printf("2. Display The Playlist\n");
        printf("3. Remove A Song\n");
        printf("4. Sort Song by Title\n");
        printf("5. Sort Song by Singer\n");
        printf("6. Save Playlist to File\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();  // Consume leftover newline

        switch (choice) {
            case 1:
                printf("Enter song title: ");
                if (fgets(title, sizeof(title), stdin)) {
                    trim_input(title);
                    printf("Enter singer: ");
                    if (fgets(singer, sizeof(singer), stdin)) {
                        trim_input(singer);
                        add_song(&playlist, title, singer);
                    }
                }
                break;
            case 2:
                display_playlist(playlist);
                break;
            case 3:
                printf("Title of song to remove: ");
                if (fgets(title, sizeof(title), stdin)) {
                    trim_input(title);
                    remove_song(&playlist, title);
                }
                break;
            case 4:
                sort_playlist_by_title(&playlist);
                display_playlist(playlist);
                break;
            case 5:
                sort_playlist_by_singer(&playlist);
                display_playlist(playlist);
                break;
            case 6:
                printf("Enter filename to save: ");
                if (fgets(filename, sizeof(filename), stdin)) {
                    trim_input(filename);
                    save_playlist_to_file(playlist, filename);
                }
                break;
            case 7:
                free_playlist(playlist);
                printf("Thank you for using the playlist manager!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 7);

    return 0;
}

// Create a new song
Song* create_song(const char *title, const char *singer) {
    Song *new_song = (Song *)malloc(sizeof(Song));
    if (!new_song) {
        printf("Memory allocation failed!\n");
        return NULL;
    }
    strcpy(new_song->title, title);
    strcpy(new_song->singer, singer);
    new_song->next = NULL;
    return new_song;
}

// Add a song to the playlist
void add_song(Song **head, const char *title, const char *singer) {
    Song *new_song = create_song(title, singer);
    if (!new_song) return;

    new_song->next = *head;
    *head = new_song;
    printf("Song added: %s by %s\n", title, singer);
}

// Display all songs
void display_playlist(Song *head) {
    if (!head) {
        printf("Playlist is empty.\n");
        return;
    }
    int index = 1;
    while (head) {
        printf("%d. %s by %s\n", index++, head->title, head->singer);
        head = head->next;
    }
}

// Remove a song by title
void remove_song(Song **head, const char *title) {
    if (!*head) {
        printf("Playlist is empty.\n");
        return;
    }
    if (strcmp((*head)->title, title) == 0) {
        Song *temp = *head;
        *head = (*head)->next;
        free(temp);
        printf("Removed song: %s\n", title);
        return;
    }
    Song *current = *head;
    while (current->next && strcmp(current->next->title, title) != 0) {
        current = current->next;
    }
    if (current->next) {
        Song *temp = current->next;
        current->next = current->next->next;
        free(temp);
        printf("Removed song: %s\n", title);
    } else {
        printf("Song not found: %s\n", title);
    }
}

// Sort playlist by title (case-insensitive)
void sort_playlist_by_title(Song **head) {
    if (!*head || !(*head)->next) return;

    int swapped;
    Song *ptr1;
    Song *lptr = NULL;

    do {
        swapped = 0;
        ptr1 = *head;

        while (ptr1->next != lptr) {
            if (case_insensitive_compare(ptr1->title, ptr1->next->title) > 0) {
                char temp_title[100], temp_singer[100];
                strcpy(temp_title, ptr1->title);
                strcpy(temp_singer, ptr1->singer);
                strcpy(ptr1->title, ptr1->next->title);
                strcpy(ptr1->singer, ptr1->next->singer);
                strcpy(ptr1->next->title, temp_title);
                strcpy(ptr1->next->singer, temp_singer);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}

// Sort playlist by singer (case-insensitive)
void sort_playlist_by_singer(Song **head) {
    if (!*head || !(*head)->next) return;

    int swapped;
    Song *ptr1;
    Song *lptr = NULL;

    do {
        swapped = 0;
        ptr1 = *head;

        while (ptr1->next != lptr) {
            if (case_insensitive_compare(ptr1->singer, ptr1->next->singer) > 0) {
                char temp_title[100], temp_singer[100];
                strcpy(temp_title, ptr1->title);
                strcpy(temp_singer, ptr1->singer);
                strcpy(ptr1->title, ptr1->next->title);
                strcpy(ptr1->singer, ptr1->next->singer);
                strcpy(ptr1->next->title, temp_title);
                strcpy(ptr1->next->singer, temp_singer);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}

// Save playlist to file
void save_playlist_to_file(Song *head, const char *filename) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        printf("Failed to open file.\n");
        return;
    }
    while (head) {
        fprintf(file, "%s - %s\n", head->title, head->singer);
        head = head->next;
    }
    fclose(file);
    printf("Playlist saved to %s\n", filename);
}

// Free playlist memory
void free_playlist(Song *head) {
    while (head) {
        Song *temp = head;
        head = head->next;
        free(temp);
    }
}
